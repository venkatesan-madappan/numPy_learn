
#https://github.com/JakubPluta/gymhero
#https://codingnomads.com/python-numpy-course-overview-what-is-numpy#intro

import numpy as np

'''
https://codingnomads.com/numpy-random-number-generator-functions
NumPy has a very robust random number generator that can be used to generate random numbers from a variety of
probability distributions. In this lesson, we will cover the following concepts:

Uniform distributions: np.random.random_sample() and np.random.uniform()
Integers: np.random.randint()
Seeding: np.random.seed() and np.random.RandomState()
Normal distributions: np.random.standard_normal() and np.random.normal()
Sampling: np.random.choice()
The new random generator: np.random.Generator # most code doesn't use this yet

Summary
NumPy provides functions for generating random numbers from uniform, integer, normal distributions 
(np.random.random_sample(), np.random.uniform(), np.random.randint(), np.random.standard_normal(), 
np.random.normal()) and for random selection (np.random.choice()).
Seeding (np.random.seed(), np.random.RandomState()) is used to initialize PRNG for reproducible results, 
essential for debugging, but should be avoided in training machine learning models.
Newer numpy.random.Generator provides similar functionality with an improved initialization process but is still early in usage.
An important caveat is not to use a NumPy random number generator for anything that needs to be 
cryptographically secure; Python's secrets module is advised for such purposes instead.

'''

if __name__ == "__main__":
    print(" Random Module - Uniform Distribution ")
    # uniform in [0, 1], 5 random numbers
    a = np.random.random_sample(5) 
    print(a)
    # low, high, 1 random number
    b = np.random.uniform(low=0,high=5) 
    print(b)
    # low, high, 10 random numbers, size can be a 
    # tuple for the shape you want
    b = np.random.uniform(low=0,high=5,size=10) 
    print(b)
    # low, high, (2,2) random numbers
    d = np.random.uniform(low=0,high=5,size=(2,2)) 
    print(d)
    # low, high, size
    print(np.random.randint(low=1,high=10, size=5)) 
    # low, high, size
    print(np.random.randint(low=1,high=10, size=(2,10))) 
    # low, high, 10 random integers
    c = np.random.randint(low=0,high=5,size=10) 
    print(c)
    '''
    Seeding with NumPy Random Seed
    The concept of seeding is strongly related to the fact that random numbers in computer 
    science are not actually random! They are really numbers from a series of numbers that are 
    generated by a deterministic algorithm. This means that if you know the algorithm and the 
    seed, you can predict the next number in the series.

    The function that generates the series of numbers is called a 'pseudo-random number generator' 
    (PRNG). The seed is a number that is used to initialize the PRNG. The seed is usually set to 
    the current time so that the series of numbers is different every time you run the program.
    However, if you set the seed to a specific number, then the series of numbers will be the 
    same every time you run the program. This is useful for debugging purposes or if you want t
    o be able to reproduce the same results every time you run the program.

    This is a very important concept because, while setting a deterministic seed is great for 
    tutorials and debugging because you can get the same results as someone else and make sure t
    hat randomness is not causing you any problems, it is a terrible idea for production code.

    The reasons are nuanced, but basically, most machine learning algorithms depend on some amount 
    of randomness when you are training them. This means that if you try different random seeds, 
    sometimes your model will perform better and other times worse. It's a common idea to think, 
    "if I find the best random seed that gets me the best performance, then that is "good." However, 
    what you are really doing is tricking yourself into thinking that your model is better than it 
    really is. This is a complex topic that we will cover later in the course, but for now, 
    please remember the following rule of thumb:

    Random seeds can be set (fixed) for debugging and tutorial purposes
    Random seeds should never be set (fixed) for training machine learning models.
    '''
    # re-run this cell to see the random numbers change
    np.random.uniform()
    # now if we set the random seed, we get the same random numbers
    np.random.seed(42)
    # no matter how many times we run this cell, we get the same number
    print(np.random.uniform()) 
    # this will be the next random number in the sequence
    print(np.random.uniform()) 
    # if you re-run this cell, you get the 
    # next random number in the sequence. 
    print(np.random.uniform())
    # The standard normal distribution can be generated 
    # with np.random.standard_normal()
    # 5 random numbers from the normal distribution 
    # with a mean of 0 and a standard deviation of 1
    print(np.random.standard_normal(5)) 
    # 2x2 matrix of random numbers from the normal distribution 
    # with a mean of 0 and a standard deviation of 1
    print(np.random.standard_normal(size=(2,2))) 
    # loc is the mean, scale is the standard deviation, 
    # 5 is the number of random numbers
    print(np.random.normal(loc=0.0, scale=1.0, size=5)) 
    # a list of animals
    list = ['dog', 'cat', 'horse', 'cat']
    # randomly choose an element from the list, 
    # with default uniform probability
    print(np.random.choice(list)) # randomly choose 2 elements from the list, 
    # with default uniform probability
    print(np.random.choice(list, size=2)) 
    # randomly choose 6 elements from the list, with replacement 
    # (it can select the same element more than once)
    print(np.random.choice(list, replace=True, size=6)) 
    # randomly choose 6 elements from the list, without replacement 
    # (it can't select the same element more than once), 
    # we will get an error
    # print(np.random.choice(list, replace=False, size=6)) 
    # this is the initialization step that 
    # creates a random number generator object.
    # we pass a seed to the random number generator
    rng = np.random.default_rng(12345) 
    # now you basically use the rng object instead of np.random
    print(rng.uniform())
    print(rng.uniform(low=0,high=5, size = (2,2)))
    print(rng.integers(low=0,high=5, size = (2,2)))
    print(rng.choice(list, size=1, p=[0.15,0.15,0.7,0.0]))
# uniform in [0, 1], 5 random numbers
print(rng.random(size=5)) 
# loc is the mean; scale is the standard deviation, 
# 5 is the number of random numbers
print(rng.normal(loc=0.0, scale=1.0, size=5)) 
